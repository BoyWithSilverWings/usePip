{"version":3,"file":"index.js","sources":["../src/toggle.ts","../src/index.ts"],"sourcesContent":["import { RefObject } from \"react\";\n\nfunction toggle(videoRef: RefObject<HTMLVideoElement>, setError: (err: string | null) => void) {\n  return function() {\n    /* If there is no element in Picture-in-Picture yet, letâ€™s request\n      Picture-in-Picture for the video, otherwise leave it. */\n    if (!document.pictureInPictureElement) {\n      videoRef.current!.requestPictureInPicture()\n        .catch(error => {\n          // Video failed to enter Picture-in-Picture mode.\n          setError(error);\n        });\n    } else {\n      document.exitPictureInPicture()\n        .catch(error => {\n          // Video failed to leave Picture-in-Picture mode.\n          setError(error);\n        });\n    }\n  };\n}\n\nexport default toggle;\n","import { useState, useEffect, RefObject } from \"react\";\n\nimport toggle from \"./toggle\";\n\nfunction usePip(videoRef: RefObject<HTMLVideoElement>) {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (!videoRef.current) {\n      return;\n    }\n    if (\n      !document.pictureInPictureEnabled ||\n      videoRef.current.disablePictureInPicture\n    ) {\n      setError(\"NotSupportedError\");\n      setLoading(false);\n      return;\n    }\n    setLoading(false);\n  }, [videoRef]);\n\n  return {\n    error,\n    loading,\n    toggle: toggle(videoRef, setError),\n  };\n}\n\nexport default usePip;\n"],"names":["toggle","videoRef","setError","document","pictureInPictureElement","exitPictureInPicture","catch","error","current","requestPictureInPicture","useState","useEffect","pictureInPictureEnabled","disablePictureInPicture","setLoading","loading"],"mappings":"uBAEA,SAASA,EAAOC,EAAuCC,UAC9C,WAGAC,SAASC,wBAOZD,SAASE,uBACNC,eAAMC,GAELL,EAASK,KATbN,EAASO,QAASC,0BACfH,eAAMC,GAELL,EAASK,qBCNnB,SAAgBN,SACgBS,YAAS,mBACbA,WAAwB,2BAElDC,0BACOV,EAASO,eAIXL,SAASS,yBACVX,EAASO,QAAQK,yBAEjBX,EAAS,0BACTY,GAAW,SAGbA,GAAW,IACV,CAACb,IAEG,OACLM,UACAQ,EACAf,OAAQA,EAAOC,EAAUC"}